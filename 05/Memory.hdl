// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // if address[14] is 0 then ramload else screen load
    DMux(in=load, sel=address[14], a=ramload, b=scrload);
    // load values into ram or screen into the specified address based on previous load val. got
    RAM16K(in=in, load=ramload, address=address[0..13], out=ramout);
    Screen(in=in, load=scrload, address=address[0..12], out=scrout);
    // read keyboard event
    Keyboard(out=scancode);

    // read from memory, choose from which which one using MSB (10 - RAM|01 Screen|11 Keyboard)
    Mux4Way16(a=ramout, b=ramout, c=scrout, d=scancode, sel=address[13..14], out=out);
}

/* 
Hack specification: LSB (A[0]) && MSB (A[14])

RAM16K:   0     to 16383 (000000000000000 to 111111111111110) (0x0000 to 0x3FFF) <-- bit 14 always 0
Screen:   16384 to 24575 (000000000000001 to 111111111111101) (0x4000 to 0x5FFF) <-- bit 14 always 1 and bit 13 always 0
Keyboard: ..... .. 24576 (............... .. 000000000000011) (...... .. 0x6000) <-- bit 14 and 13 always 1
*/

